class BankAccount {
	private String AccountNumber;
	private double AccountBalance;
	public String getAccountNumber() {
		return AccountNumber;
	}
	public double getAccountBalance() {
		return AccountBalance;
	}
	public BankAccount(String AccountNumber) {
		this.AccountNumber = AccountNumber;
	}
	// critical section
	public boolean depositAmount(double amount) {
		if (amount < 0) {
			return false;
		} else {
			AccountBalance = AccountBalance + amount;
			return true;
		}
	}
	// critical section
	public boolean withdrawAmount(double amount) {
		if (amount > AccountBalance) {
			return false;
		}else {
			AccountBalance = AccountBalance - amount;
			return true;
		}
	}
}

	class Transaction extends Thread {
		public static enum TransactionType {
			DEPOSIT_MONEY(1), WITHDRAW_MONEY(2);
			private TransactionType(int value) {
			}
		};
		private TransactionType transactionType;
		private BankAccount Account;

		private double Amount;
/*
* If transactionType == 1, depositAmount() else if transactionType == 2 withdrawAmount()
*/
		public Transaction(BankAccount crunchifyAccount, TransactionType transactionType, double Amount) {
			this.transactionType = transactionType;
			this.Account = crunchifyAccount;
			this.Amount = Amount;
		}
		public void run() {
			switch (this.transactionType) {
			case DEPOSIT_MONEY:
				depositAmount();
				printBalance();
				break;
			case WITHDRAW_MONEY:
				withdrawAmount();
				printBalance();
				break;
			default:
				System.out.println("NOT A VALID TRANSACTION");
			}
